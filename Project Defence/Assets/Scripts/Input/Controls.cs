//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace NewInputSystem
{
    public partial class @Inputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8ded2ab1-f116-4c11-a4e8-8d36e63fc822"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftHold"",
                    ""type"": ""Button"",
                    ""id"": ""3dea058b-bee5-4535-bc10-2f52a4228558"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightHold"",
                    ""type"": ""Button"",
                    ""id"": ""b543e96a-6ae7-4844-b7f5-6407e2be3990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""f89ed2e2-8cc5-4079-82ad-0b1e503a66cf"",
                    ""expectedControlType"": ""Digital"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d15cbae9-2e55-4d4c-afed-3f01dbd3d3c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1cc623b-8fa2-491b-8e73-55fb57d0d3be"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd718d2b-cf67-460a-abf0-9438fe167870"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_MouseLeftHold = m_Gameplay.FindAction("MouseLeftHold", throwIfNotFound: true);
            m_Gameplay_MouseRightHold = m_Gameplay.FindAction("MouseRightHold", throwIfNotFound: true);
            m_Gameplay_MouseScroll = m_Gameplay.FindAction("MouseScroll", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_MouseLeftHold;
        private readonly InputAction m_Gameplay_MouseRightHold;
        private readonly InputAction m_Gameplay_MouseScroll;
        public struct GameplayActions
        {
            private @Inputs m_Wrapper;
            public GameplayActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseLeftHold => m_Wrapper.m_Gameplay_MouseLeftHold;
            public InputAction @MouseRightHold => m_Wrapper.m_Gameplay_MouseRightHold;
            public InputAction @MouseScroll => m_Wrapper.m_Gameplay_MouseScroll;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @MouseLeftHold.started += instance.OnMouseLeftHold;
                @MouseLeftHold.performed += instance.OnMouseLeftHold;
                @MouseLeftHold.canceled += instance.OnMouseLeftHold;
                @MouseRightHold.started += instance.OnMouseRightHold;
                @MouseRightHold.performed += instance.OnMouseRightHold;
                @MouseRightHold.canceled += instance.OnMouseRightHold;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @MouseLeftHold.started -= instance.OnMouseLeftHold;
                @MouseLeftHold.performed -= instance.OnMouseLeftHold;
                @MouseLeftHold.canceled -= instance.OnMouseLeftHold;
                @MouseRightHold.started -= instance.OnMouseRightHold;
                @MouseRightHold.performed -= instance.OnMouseRightHold;
                @MouseRightHold.canceled -= instance.OnMouseRightHold;
                @MouseScroll.started -= instance.OnMouseScroll;
                @MouseScroll.performed -= instance.OnMouseScroll;
                @MouseScroll.canceled -= instance.OnMouseScroll;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        public interface IGameplayActions
        {
            void OnMouseLeftHold(InputAction.CallbackContext context);
            void OnMouseRightHold(InputAction.CallbackContext context);
            void OnMouseScroll(InputAction.CallbackContext context);
        }
    }
}
